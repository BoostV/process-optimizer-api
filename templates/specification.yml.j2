openapi: "3.0.0"

info:
  title: Process Optimizer API
  version: "1.0"
servers:
  - url: http://localhost:9090/v1.0

paths:
  /optimizer:
    post:
      {% if PO_AUTH_URL %}
      security:
        - oauth2: []
        - apikey: []
      {% endif %}
      description: Run optimizer with the specified parameters
      operationId: optimizerapi.optimizer.run
      responses:
        "200":
          description: Result of running the optimizer with the specified parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/result"

        "400":
          description: Bad input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Unknown server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/experiment"
            examples:
              minimal:
                value:
                  {
                    "extras": { "experimentSuggestionCount": 1 },
                    "data": [],
                    "optimizerConfig":
                      {
                        "baseEstimator": "GP",
                        "acqFunc": "gp_hedge",
                        "initialPoints": 3,
                        "kappa": 1.96,
                        "xi": 0.01,
                        "space":
                          [
                            {
                              "type": "continuous",
                              "name": "test",
                              "from": 1,
                              "to": 2,
                            },
                          ],
                      },
                  }
              complete:
                value:
                  {
                    "extras": { "experimentSuggestionCount": 3 },
                    "data":
                      [
                        { "xi": [0, 128, 255], "yi": [5] },
                        { "xi": [128, 255, 128], "yi": [2] },
                        { "xi": [255, 0, 0], "yi": [10] },
                        { "xi": [172, 145, 238], "yi": [7] },
                        { "xi": [153, 230, 157], "yi": [1] },
                        { "xi": [3, 207, 0], "yi": [0] },
                        { "xi": [69, 85, 85], "yi": [9] },
                        { "xi": [214, 65, 178], "yi": [3] },
                        { "xi": [7, 209, 4], "yi": [0] },
                        { "xi": [88, 165, 187], "yi": [4] },
                        { "xi": [255, 208, 0], "yi": [8] },
                        { "xi": [0, 85, 2], "yi": [1] },
                        { "xi": [143, 46, 46], "yi": [5] },
                      ],
                    "optimizerConfig":
                      {
                        "baseEstimator": "GP",
                        "acqFunc": "gp_hedge",
                        "initialPoints": 3,
                        "kappa": 1.96,
                        "xi": 0.01,
                        "space":
                          [
                            {
                              "type": "continuous",
                              "name": "Red",
                              "from": 0,
                              "to": 255,
                            },
                            {
                              "type": "continuous",
                              "name": "Green",
                              "from": 0,
                              "to": 255,
                            },
                            {
                              "type": "discrete",
                              "name": "Blue",
                              "from": 0,
                              "to": 255,
                            },
                          ],
                        "constraints":
                          [
                            {
                              "type": "sum",
                              "dimensions": [0, 1],
                              "value": 50,
                            },
                          ],
                      },
                  }

components:
  {% if PO_AUTH_URL %}
  securitySchemes:
    apikey:
      x-apikeyInfoFunc: optimizerapi.auth.apikey_handler
      type: apiKey
      name: apikey
      in: query
    oauth2:
      type: oauth2
      x-tokenInfoFunc: optimizerapi.auth.token_info
      flows:
        implicit:
          # authorizationUrl: https://keycloak.browniebee.projects.alexandra.dk/realms/brownie-bee-dev/protocol/openid-connect/auth
          authorizationUrl: {{ PO_AUTH_URL }}
          scopes: {}
  {% endif %}
  schemas:
    experiment:
      title: An experiment definition
      type: object
      properties:
        extras:
          description: A plain JSON object that can contain arbitrary values
          type: object
          properties:
            objectivePars:
              type: string
              enum:
                - result
                - expected_minimum
            graphFormat:
              type: string
            experimentSuggestionCount:
              type: number
            maxQuality:
              type: number
            graphs:
              type: array
              default: ["objective", "convergence", "pareto"]
              items:
                type: string
          additionalProperties:
            type: string
        data:
          type: array
          items:
            type: object
            properties:
              xi:
                type: array
                items:
                  anyOf:
                    - type: string
                    - type: number
              yi:
                type: array
                items:
                  type: number
        optimizerConfig:
          type: object
          properties:
            baseEstimator:
              type: string
            acqFunc:
              type: string
            initialPoints:
              type: integer
            kappa:
              type: number
            xi:
              type: number
            space:
              $ref: "#/components/schemas/space"
            constraints:
              $ref: "#/components/schemas/constraints"
      required:
        - data
        - optimizerConfig
    constraints:
      type: array
      items:
        $ref: "#/components/schemas/constraint"
    constraint:
      type: object
      properties:
        type:
          type: string
          enum:
            - sum
        dimensions:
          type: array
          items:
            type: number
        value:
          type: number
      required:
        - dimensions
        - value
    space:
      type: array
      items:
        type: object
        properties:
          type:
            type: string
            description: Type of the dimension. Can be category, discrete or continuous
            enum:
              - category
              - discrete
              - continuous
          name:
            type: string
          from:
            type: number
          to:
            type: number
          categories:
            type: array
            items:
              type: string
        required:
          - type
          - name
    result:
      title: Result of running optimizer on experiment
      type: object
      properties:
        plots:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              plot:
                description: A base64 encoded png representation of the plot
                type: string
        result:
          type: object
          properties:
            expected_minimum:
              type: array
              items:
                type: array
                items:
                  anyOf:
                    - type: string
                    - type: number
            pickled:
              type: string
            next:
              type: array
              items:
                type: array
                items:
                  anyOf:
                    - type: string
                    - type: number
            models:
              type: array
              items:
                type: object
                properties:
                  expected_minimum:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf:
                          - type: string
                          - type: number
                  extras:
                    type: object
            extras:
              type: object
    error:
      title: Errors returned by the API
      type: object
      properties:
        message:
          type: string
          description: Human readable description of the error
        error:
          type: string
          description: Detailed error message as returned from the underlying routines
